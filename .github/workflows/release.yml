name: Create Release

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.1)'
        required: true
        default: '1.0.1'
      create_tag:
        description: 'Create new tag'
        type: boolean
        default: true

jobs:
  create-tag:
    runs-on: ubuntu-latest
    if: github.event.inputs.create_tag == 'true' || github.event_name == 'push'
    outputs:
      tag_name: ${{ steps.create_tag.outputs.tag_name }}
      version: ${{ steps.create_tag.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Set version
        id: set_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="1.0.1"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=v$VERSION" >> $GITHUB_OUTPUT
      
      - name: Create and push tag
        id: create_tag
        run: |
          VERSION="${{ steps.set_version.outputs.version }}"
          TAG_NAME="v$VERSION"
          
          # Check if tag already exists
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "Tag $TAG_NAME already exists"
          else
            git config user.name "GitHub Actions"
            git config user.email "actions@github.com"
            git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
            git push origin "$TAG_NAME"
            echo "Created and pushed tag $TAG_NAME"
          fi
          
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  build-windows:
    needs: create-tag
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-tag.outputs.tag_name }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with: 
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller cairosvg pillow
          pip install -r requirements.txt
      
      - name: Create icon files
        run: |
          echo "Creating placeholder icon files..."
          # Create a simple ICO file (placeholder)
          python -c "
          from PIL import Image
          import io
          
          # Create a simple 32x32 icon
          img = Image.new('RGBA', (32, 32), (0, 100, 200, 255))
          img.save('icon.ico', format='ICO')
          print('Created icon.ico')
          "
      
      - name: Build Windows executable
        run: |
          python -m PyInstaller --name="meet-zone-windows-${{ needs.create-tag.outputs.version }}" --onefile --windowed --icon=icon.ico --add-data="roster.csv;." --hidden-import=zoneinfo.tzpath src/meet_zone/__main__.py
      
      - name: Generate checksum
        shell: powershell
        run: |
          Get-FileHash dist/meet-zone-windows-${{ needs.create-tag.outputs.version }}.exe -Algorithm SHA256 | Select-Object -ExpandProperty Hash | Out-File -FilePath dist/meet-zone-windows-${{ needs.create-tag.outputs.version }}.exe.sha256 -Encoding ascii
      
      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ needs.create-tag.outputs.version }}
          path: |
            dist/meet-zone-windows-${{ needs.create-tag.outputs.version }}.exe
            dist/meet-zone-windows-${{ needs.create-tag.outputs.version }}.exe.sha256

  build-macos:
    needs: create-tag
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-tag.outputs.tag_name }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with: 
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller cairosvg pillow
          pip install -r requirements.txt
      
      - name: Create icon file
        run: |
          python -c "
          from PIL import Image
          
          # Create a simple 32x32 PNG icon
          img = Image.new('RGBA', (32, 32), (0, 100, 200, 255))
          img.save('icon.png', format='PNG')
          print('Created icon.png')
          "
      
      - name: Build macOS executable
        run: |
          python -m PyInstaller --name="meet-zone-macos-${{ needs.create-tag.outputs.version }}" --onefile --windowed --icon=icon.png --add-data="roster.csv:." --hidden-import=zoneinfo.tzpath src/meet_zone/__main__.py
      
      - name: Make executable and generate checksum
        run: |
          chmod +x dist/meet-zone-macos-${{ needs.create-tag.outputs.version }}
          shasum -a 256 dist/meet-zone-macos-${{ needs.create-tag.outputs.version }} > dist/meet-zone-macos-${{ needs.create-tag.outputs.version }}.sha256
      
      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ needs.create-tag.outputs.version }}
          path: |
            dist/meet-zone-macos-${{ needs.create-tag.outputs.version }}
            dist/meet-zone-macos-${{ needs.create-tag.outputs.version }}.sha256

  build-linux:
    needs: create-tag
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-tag.outputs.tag_name }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with: 
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller cairosvg pillow
          pip install -r requirements.txt
      
      - name: Create icon file
        run: |
          python -c "
          from PIL import Image
          
          # Create a simple 32x32 PNG icon
          img = Image.new('RGBA', (32, 32), (0, 100, 200, 255))
          img.save('icon.png', format='PNG')
          print('Created icon.png')
          "
      
      - name: Build Linux executable
        run: |
          python -m PyInstaller --name="meet-zone-linux-${{ needs.create-tag.outputs.version }}" --onefile --windowed --icon=icon.png --add-data="roster.csv:." --hidden-import=zoneinfo.tzpath src/meet_zone/__main__.py
      
      - name: Make executable and generate checksum
        run: |
          chmod +x dist/meet-zone-linux-${{ needs.create-tag.outputs.version }}
          sha256sum dist/meet-zone-linux-${{ needs.create-tag.outputs.version }} > dist/meet-zone-linux-${{ needs.create-tag.outputs.version }}.sha256
      
      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ needs.create-tag.outputs.version }}
          path: |
            dist/meet-zone-linux-${{ needs.create-tag.outputs.version }}
            dist/meet-zone-linux-${{ needs.create-tag.outputs.version }}.sha256

  create-source:
    needs: create-tag
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-tag.outputs.tag_name }}
          fetch-depth: 0
      
      - name: Debug - List files
        run: |
          echo "Current directory contents:"
          ls -la
          echo "Git status:"
          git status || echo "Git status failed"
          echo "Current commit:"
          git rev-parse HEAD || echo "Git rev-parse failed"
      
      - name: Create source archives
        run: |
          echo "Creating source archives..."
          
          # Create ZIP archive excluding unnecessary files
          zip -r meet-zone-source-${{ needs.create-tag.outputs.version }}.zip . \
            -x "*.git*" \
            -x "dist/*" \
            -x "*/__pycache__/*" \
            -x "*.pyc" \
            -x "*.pyo" \
            -x ".DS_Store" \
            -x "*.log"
          
          # Create TAR.GZ archive excluding unnecessary files  
          tar czf meet-zone-source-${{ needs.create-tag.outputs.version }}.tar.gz \
            --exclude=".git" \
            --exclude="dist" \
            --exclude="__pycache__" \
            --exclude="*.pyc" \
            --exclude="*.pyo" \
            --exclude=".DS_Store" \
            --exclude="*.log" \
            .
          
          echo "Archives created successfully:"
          ls -la meet-zone-source-*
      
      - name: Generate checksums
        run: |
          echo "Generating checksums..."
          sha256sum meet-zone-source-${{ needs.create-tag.outputs.version }}.zip > meet-zone-source-${{ needs.create-tag.outputs.version }}.zip.sha256
          sha256sum meet-zone-source-${{ needs.create-tag.outputs.version }}.tar.gz > meet-zone-source-${{ needs.create-tag.outputs.version }}.tar.gz.sha256
          
          echo "Checksums created:"
          cat meet-zone-source-${{ needs.create-tag.outputs.version }}.zip.sha256
          cat meet-zone-source-${{ needs.create-tag.outputs.version }}.tar.gz.sha256
      
      - name: Upload source artifacts
        uses: actions/upload-artifact@v4
        with:
          name: source-${{ needs.create-tag.outputs.version }}
          path: |
            meet-zone-source-${{ needs.create-tag.outputs.version }}.zip
            meet-zone-source-${{ needs.create-tag.outputs.version }}.zip.sha256
            meet-zone-source-${{ needs.create-tag.outputs.version }}.tar.gz
            meet-zone-source-${{ needs.create-tag.outputs.version }}.tar.gz.sha256

  create-release:
    needs: [create-tag, build-windows, build-macos, build-linux, create-source]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-tag.outputs.tag_name }}
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Prepare release files
        run: |
          mkdir -p release-files
          find artifacts -type f -exec cp {} release-files/ \;
          echo "Release files prepared:"
          ls -la release-files/
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.create-tag.outputs.tag_name }}
          name: "Meet-Zone v${{ needs.create-tag.outputs.version }}"
          body: |
            # Meet-Zone v${{ needs.create-tag.outputs.version }}
            
            A professional terminal application for finding optimal meeting times across multiple time zones.
            
            ## 🚀 What's New in v${{ needs.create-tag.outputs.version }}
            
            - Enhanced terminal-based UI with improved tabbed interface
            - Better error handling and validation for user inputs
            - Improved time zone selection with comprehensive timezone list
            - Enhanced meeting slot scoring algorithm with configurable prioritization
            - Better visual feedback with color-coded status messages
            - Fixed time parsing validation issues
            - Improved participant removal functionality
            - Better handling of edge cases in meeting slot calculation
            
            ## 📥 Downloads
            
            Choose the appropriate version for your operating system:
            
            | Platform | File | Description |
            |----------|------|-------------|
            | Windows | `meet-zone-windows-${{ needs.create-tag.outputs.version }}.exe` | Windows executable |
            | macOS | `meet-zone-macos-${{ needs.create-tag.outputs.version }}` | macOS executable |
            | Linux | `meet-zone-linux-${{ needs.create-tag.outputs.version }}` | Linux executable |
            | Source | `meet-zone-source-${{ needs.create-tag.outputs.version }}.zip` | Source code (ZIP) |
            | Source | `meet-zone-source-${{ needs.create-tag.outputs.version }}.tar.gz` | Source code (TAR.GZ) |
            
            ## 🔧 Installation
            
            ### Windows
            ```cmd
            # Download and run directly
            meet-zone-windows-${{ needs.create-tag.outputs.version }}.exe
            ```
            
            ### macOS/Linux
            ```bash
            # Make executable
            chmod +x meet-zone-macos-${{ needs.create-tag.outputs.version }}
            
            # Run
            ./meet-zone-macos-${{ needs.create-tag.outputs.version }}
            ```
            
            ## 🔐 Verification
            
            Each file includes a SHA256 checksum for verification:
            
            ```bash
            # Windows (PowerShell)
            Get-FileHash -Algorithm SHA256 meet-zone-windows-${{ needs.create-tag.outputs.version }}.exe
            
            # macOS
            shasum -a 256 meet-zone-macos-${{ needs.create-tag.outputs.version }}
            
            # Linux
            sha256sum meet-zone-linux-${{ needs.create-tag.outputs.version }}
            ```
            
            ## 📖 Usage
            
            ```bash
            # Launch with empty UI (add participants manually)
            ./meet-zone
            
            # Load participants from CSV file
            ./meet-zone roster.csv
            
            # Specify minimum meeting duration
            ./meet-zone roster.csv --duration 45
            
            # Show options for the entire week
            ./meet-zone roster.csv --week
            ```
            
            ## 📋 CSV Format
            
            ```csv
            name,timezone,start_time,end_time
            Alice,America/New_York,09:00,17:00
            Bob,Europe/London,09:00,17:00
            Charlie,Asia/Tokyo,09:00,17:00
            ```
            
            ## 🐛 Bug Reports
            
            Found a bug? Please [open an issue](https://github.com/${{ github.repository }}/issues) with details about your system and the problem.
            
            ## 📝 Full Changelog
            
            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for complete version history.
          files: release-files/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
