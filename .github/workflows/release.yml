name: Create Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.2)'
        required: true
        default: '1.0.2'
      create_tag:
        description: 'Create new tag'
        type: boolean
        default: true

permissions:
  contents: write
  actions: read
  packages: write

jobs:
  create-tag:
    runs-on: ubuntu-latest
    if: github.event.inputs.create_tag == 'true' && github.event_name == 'workflow_dispatch'
    outputs:
      tag_name: ${{ steps.create_tag.outputs.tag_name }}
      version: ${{ steps.create_tag.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Set version
        id: set_version
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=v$VERSION" >> $GITHUB_OUTPUT
      
      - name: Create and push tag
        id: create_tag
        run: |
          VERSION="${{ steps.set_version.outputs.version }}"
          TAG_NAME="v$VERSION"
          
          # Check if tag already exists
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "Tag $TAG_NAME already exists"
          else
            git config user.name "GitHub Actions"
            git config user.email "actions@github.com"
            git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
            git push origin "$TAG_NAME"
            echo "Created and pushed tag $TAG_NAME"
          fi
          
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  get-version:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.get_version.outputs.tag_name }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get version from tag or input
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            TAG_NAME="v$VERSION"
          else
            # Extract from tag push
            TAG_NAME="${{ github.ref_name }}"
            VERSION="${TAG_NAME#v}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION, tag: $TAG_NAME"

  build-windows:
    needs: [get-version]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.get-version.outputs.tag_name }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with: 
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller cairosvg pillow
          pip install -r requirements.txt
      
      - name: Create icon files
        run: |
          echo "Creating placeholder icon files..."
          python -c "
          from PIL import Image
          import io
          
          # Create a simple 32x32 icon
          img = Image.new('RGBA', (32, 32), (0, 100, 200, 255))
          img.save('icon.ico', format='ICO')
          print('Created icon.ico')
          "
      
      - name: Build Windows executable
        run: |
          python -m PyInstaller --name="meet-zone-windows-${{ needs.get-version.outputs.version }}" --onefile --windowed --icon=icon.ico --add-data="roster.csv;." --hidden-import=zoneinfo.tzpath --hidden-import=textual --hidden-import=textual.app --hidden-import=textual.widgets --hidden-import=textual.widgets.button --hidden-import=textual.widgets.data_table --hidden-import=textual.widgets.footer --hidden-import=textual.widgets.header --hidden-import=textual.widgets.input --hidden-import=textual.widgets.label --hidden-import=textual.widgets.select --hidden-import=textual.widgets.static --hidden-import=textual.widgets.tabbed_content --hidden-import=textual.widgets.tab_pane --hidden-import=textual.containers --hidden-import=textual.containers.container --hidden-import=textual.containers.horizontal --hidden-import=textual.containers.vertical --hidden-import=textual.reactive --hidden-import=textual.validation --hidden-import=textual.coordinate --hidden-import=pytz --collect-all=textual src/meet_zone/__main__.py
      
      - name: Generate checksum
        shell: powershell
        run: |
          Get-FileHash dist/meet-zone-windows-${{ needs.get-version.outputs.version }}.exe -Algorithm SHA256 | Select-Object -ExpandProperty Hash | Out-File -FilePath dist/meet-zone-windows-${{ needs.get-version.outputs.version }}.exe.sha256 -Encoding ascii
      
      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ needs.get-version.outputs.version }}
          path: |
            dist/meet-zone-windows-${{ needs.get-version.outputs.version }}.exe
            dist/meet-zone-windows-${{ needs.get-version.outputs.version }}.exe.sha256

  build-macos:
    needs: [get-version]
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.get-version.outputs.tag_name }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with: 
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller cairosvg pillow
          pip install -r requirements.txt
      
      - name: Create icon file
        run: |
          python -c "
          from PIL import Image
          
          # Create a simple 32x32 PNG icon
          img = Image.new('RGBA', (32, 32), (0, 100, 200, 255))
          img.save('icon.png', format='PNG')
          print('Created icon.png')
          "
      
      - name: Build macOS executable
        run: |
          python -m PyInstaller \
            --name="meet-zone-macos-${{ needs.get-version.outputs.version }}" \
            --onefile --windowed \
            --icon=icon.png \
            --add-data="roster.csv:." \
            --hidden-import=zoneinfo.tzpath \
            --hidden-import=textual \
            --hidden-import=textual.app \
            --hidden-import=textual.widgets \
            --hidden-import=textual.widgets.button \
            --hidden-import=textual.widgets.data_table \
            --hidden-import=textual.widgets.footer \
            --hidden-import=textual.widgets.header \
            --hidden-import=textual.widgets.input \
            --hidden-import=textual.widgets.label \
            --hidden-import=textual.widgets.select \
            --hidden-import=textual.widgets.static \
            --hidden-import=textual.widgets.tabbed_content \
            --hidden-import=textual.widgets.tab_pane \
            --hidden-import=textual.containers \
            --hidden-import=textual.containers.container \
            --hidden-import=textual.containers.horizontal \
            --hidden-import=textual.containers.vertical \
            --hidden-import=textual.reactive \
            --hidden-import=textual.validation \
            --hidden-import=textual.coordinate \
            --hidden-import=pytz \
            --collect-all=textual \
            src/meet_zone/__main__.py
      
      - name: Make executable and generate checksum
        run: |
          chmod +x dist/meet-zone-macos-${{ needs.get-version.outputs.version }}
          shasum -a 256 dist/meet-zone-macos-${{ needs.get-version.outputs.version }} > dist/meet-zone-macos-${{ needs.get-version.outputs.version }}.sha256
      
      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ needs.get-version.outputs.version }}
          path: |
            dist/meet-zone-macos-${{ needs.get-version.outputs.version }}
            dist/meet-zone-macos-${{ needs.get-version.outputs.version }}.sha256

  build-linux:
    needs: [get-version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.get-version.outputs.tag_name }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with: 
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller cairosvg pillow
          pip install -r requirements.txt
      
      - name: Create icon file
        run: |
          python -c "
          from PIL import Image
          
          # Create a simple 32x32 PNG icon
          img = Image.new('RGBA', (32, 32), (0, 100, 200, 255))
          img.save('icon.png', format='PNG')
          print('Created icon.png')
          "
      
      - name: Build Linux executable
        run: |
          python -m PyInstaller \
            --name="meet-zone-linux-${{ needs.get-version.outputs.version }}" \
            --onefile --windowed \
            --icon=icon.png \
            --add-data="roster.csv:." \
            --hidden-import=zoneinfo.tzpath \
            --hidden-import=textual \
            --hidden-import=textual.app \
            --hidden-import=textual.widgets \
            --hidden-import=textual.widgets.button \
            --hidden-import=textual.widgets.data_table \
            --hidden-import=textual.widgets.footer \
            --hidden-import=textual.widgets.header \
            --hidden-import=textual.widgets.input \
            --hidden-import=textual.widgets.label \
            --hidden-import=textual.widgets.select \
            --hidden-import=textual.widgets.static \
            --hidden-import=textual.widgets.tabbed_content \
            --hidden-import=textual.widgets.tab_pane \
            --hidden-import=textual.containers \
            --hidden-import=textual.containers.container \
            --hidden-import=textual.containers.horizontal \
            --hidden-import=textual.containers.vertical \
            --hidden-import=textual.reactive \
            --hidden-import=textual.validation \
            --hidden-import=textual.coordinate \
            --hidden-import=pytz \
            --collect-all=textual \
            src/meet_zone/__main__.py
      
      - name: Make executable and generate checksum
        run: |
          chmod +x dist/meet-zone-linux-${{ needs.get-version.outputs.version }}
          sha256sum dist/meet-zone-linux-${{ needs.get-version.outputs.version }} > dist/meet-zone-linux-${{ needs.get-version.outputs.version }}.sha256
      
      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ needs.get-version.outputs.version }}
          path: |
            dist/meet-zone-linux-${{ needs.get-version.outputs.version }}
            dist/meet-zone-linux-${{ needs.get-version.outputs.version }}.sha256

  create-source:
    needs: [get-version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.get-version.outputs.tag_name }}
          fetch-depth: 0
      
      - name: Prepare clean source directory
        run: |
          echo "Preparing clean source directory..."
          
          # Create a temporary directory for clean source
          mkdir -p /tmp/meet-zone-source
          
          # Copy only the files we want in the source archive
          cp -r src /tmp/meet-zone-source/
          cp requirements.txt /tmp/meet-zone-source/
          cp README.md /tmp/meet-zone-source/
          cp CHANGELOG.md /tmp/meet-zone-source/
          cp pyproject.toml /tmp/meet-zone-source/
          cp roster.csv /tmp/meet-zone-source/
          
          # Copy icon.svg if it exists
          if [ -f icon.svg ]; then
            cp icon.svg /tmp/meet-zone-source/
          fi
          
          # Copy .github directory if it exists
          if [ -d .github ]; then
            cp -r .github /tmp/meet-zone-source/
          fi
          
          # Copy docs directory if it exists
          if [ -d docs ]; then
            cp -r docs /tmp/meet-zone-source/
          fi
          
          echo "Source directory prepared:"
          ls -la /tmp/meet-zone-source/
      
      - name: Create source archives
        run: |
          echo "Creating source archives..."
          
          # Change to temp directory to avoid path issues
          cd /tmp
          
          # Create ZIP archive
          zip -r meet-zone-source-${{ needs.get-version.outputs.version }}.zip meet-zone-source/
          
          # Create TAR.GZ archive with --warning=no-file-changed to ignore file change warnings
          tar --warning=no-file-changed -czf meet-zone-source-${{ needs.get-version.outputs.version }}.tar.gz meet-zone-source/
          
          # Move archives back to workspace
          mv meet-zone-source-${{ needs.get-version.outputs.version }}.zip $GITHUB_WORKSPACE/
          mv meet-zone-source-${{ needs.get-version.outputs.version }}.tar.gz $GITHUB_WORKSPACE/
          
          # Return to workspace
          cd $GITHUB_WORKSPACE
          
          echo "Archives created successfully:"
          ls -la meet-zone-source-*
      
      - name: Generate checksums
        run: |
          echo "Generating checksums..."
          sha256sum meet-zone-source-${{ needs.get-version.outputs.version }}.zip > meet-zone-source-${{ needs.get-version.outputs.version }}.zip.sha256
          sha256sum meet-zone-source-${{ needs.get-version.outputs.version }}.tar.gz > meet-zone-source-${{ needs.get-version.outputs.version }}.tar.gz.sha256
          
          echo "Checksums created:"
          cat meet-zone-source-${{ needs.get-version.outputs.version }}.zip.sha256
          cat meet-zone-source-${{ needs.get-version.outputs.version }}.tar.gz.sha256
      
      - name: Upload source artifacts
        uses: actions/upload-artifact@v4
        with:
          name: source-${{ needs.get-version.outputs.version }}
          path: |
            meet-zone-source-${{ needs.get-version.outputs.version }}.zip
            meet-zone-source-${{ needs.get-version.outputs.version }}.zip.sha256
            meet-zone-source-${{ needs.get-version.outputs.version }}.tar.gz
            meet-zone-source-${{ needs.get-version.outputs.version }}.tar.gz.sha256

  create-release:
    needs: [get-version, build-windows, build-macos, build-linux, create-source]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.get-version.outputs.tag_name }}
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Prepare release files
        run: |
          mkdir -p release-files
          find artifacts -type f -exec cp {} release-files/ \;
          echo "Release files prepared:"
          ls -la release-files/
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.get-version.outputs.tag_name }}
          name: "Meet-Zone v${{ needs.get-version.outputs.version }}"
          body: |
            # Meet-Zone v${{ needs.get-version.outputs.version }}
            
            A professional terminal application for finding optimal meeting times across multiple time zones.
            
            ## 🚀 What's New in v${{ needs.get-version.outputs.version }}
            
            - **Fixed PyInstaller build configuration** to include all required Textual modules
            - **Added comprehensive hidden imports** for textual.widgets.tab_pane and related modules
            - **Fixed "No module named 'textual.widgets.tab_pane'" error** in executables
            - **Enhanced build process** with --collect-all=textual flag for complete module inclusion
            - **Improved build reliability** across all platforms (Windows, macOS, Linux)
            
            ## 📥 Downloads
            
            Choose the appropriate version for your operating system:
            
            | Platform | File | Description |
            |----------|------|-------------|
            | Windows | `meet-zone-windows-${{ needs.get-version.outputs.version }}.exe` | Windows executable |
            | macOS | `meet-zone-macos-${{ needs.get-version.outputs.version }}` | macOS executable |
            | Linux | `meet-zone-linux-${{ needs.get-version.outputs.version }}` | Linux executable |
            | Source | `meet-zone-source-${{ needs.get-version.outputs.version }}.zip` | Source code (ZIP) |
            | Source | `meet-zone-source-${{ needs.get-version.outputs.version }}.tar.gz` | Source code (TAR.GZ) |
            
            ## 🔧 Installation
            
            ### Windows
            ```cmd
            # Download and run directly
            meet-zone-windows-${{ needs.get-version.outputs.version }}.exe
            ```
            
            ### macOS/Linux
            ```bash
            # Make executable
            chmod +x meet-zone-macos-${{ needs.get-version.outputs.version }}
            
            # Run
            ./meet-zone-macos-${{ needs.get-version.outputs.version }}
            ```
            
            ## 🔐 Verification
            
            Each file includes a SHA256 checksum for verification:
            
            ```bash
            # Windows (PowerShell)
            Get-FileHash -Algorithm SHA256 meet-zone-windows-${{ needs.get-version.outputs.version }}.exe
            
            # macOS
            shasum -a 256 meet-zone-macos-${{ needs.get-version.outputs.version }}
            
            # Linux
            sha256sum meet-zone-linux-${{ needs.get-version.outputs.version }}
            ```
            
            ## 📖 Usage
            
            ```bash
            # Launch with empty UI (add participants manually)
            ./meet-zone
            
            # Load participants from CSV file
            ./meet-zone roster.csv
            
            # Specify minimum meeting duration
            ./meet-zone roster.csv --duration 45
            
            # Show options for the entire week
            ./meet-zone roster.csv --week
            ```
            
            ## 📋 CSV Format
            
            ```csv
            name,timezone,start_time,end_time
            Alice,America/New_York,09:00,17:00
            Bob,Europe/London,09:00,17:00
            Charlie,Asia/Tokyo,09:00,17:00
            ```
            
            ## 🐛 Bug Reports
            
            Found a bug? Please [open an issue](https://github.com/${{ github.repository }}/issues) with details about your system and the problem.
            
            ## 📝 Full Changelog
            
            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for complete version history.
          files: release-files/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
