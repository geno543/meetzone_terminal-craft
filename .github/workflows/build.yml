name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to use when manually triggered (without v prefix)'
        required: false
        default: 'dev'

# Strip leading "v" or use manual input
env:
  VERSION: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version || github.ref_name }}

jobs:
  build-windows:
    runs-on: windows-latest
    env: { VERSION: ${{ env.VERSION }} }
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with: { python-version: '3.10' }
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller cairosvg pillow
          pip install -r requirements.txt
      - name: Create icon
        run: |
          python -c "
          from PIL import Image
          img = Image.new('RGBA', (32, 32), (0, 100, 200, 255))
          img.save('icon.ico', format='ICO')
          "
      - name: Build .exe
        run: |
          python -m PyInstaller \
            --name="meet-zone-windows-${{ env.VERSION }}" \
            --onefile --windowed \
            --icon=icon.ico \
            --add-data="roster.csv;." \
            --hidden-import=zoneinfo.tzpath \
            --hidden-import=textual \
            --hidden-import=textual.app \
            --hidden-import=textual.widgets \
            --hidden-import=textual.widgets.button \
            --hidden-import=textual.widgets.data_table \
            --hidden-import=textual.widgets.footer \
            --hidden-import=textual.widgets.header \
            --hidden-import=textual.widgets.input \
            --hidden-import=textual.widgets.label \
            --hidden-import=textual.widgets.select \
            --hidden-import=textual.widgets.static \
            --hidden-import=textual.widgets.tabbed_content \
            --hidden-import=textual.widgets.tab_pane \
            --hidden-import=textual.containers \
            --hidden-import=textual.containers.container \
            --hidden-import=textual.containers.horizontal \
            --hidden-import=textual.containers.vertical \
            --hidden-import=textual.reactive \
            --hidden-import=textual.validation \
            --hidden-import=textual.coordinate \
            --hidden-import=pytz \
            --collect-all=textual \
            src/meet_zone/__main__.py
      - name: Checksum
        shell: powershell
        run: |
          Get-FileHash dist/meet-zone-windows-${{ env.VERSION }}.exe -Algorithm SHA256 |
            Select -Expand Hash > dist/meet-zone-windows-${{ env.VERSION }}.exe.sha256
      - name: Upload Windows
        uses: actions/upload-artifact@v3
        with:
          name: win-${{ env.VERSION }}
          path: |
            dist/meet-zone-windows-${{ env.VERSION }}.exe
            dist/meet-zone-windows-${{ env.VERSION }}.exe.sha256

  build-macos:
    runs-on: macos-latest
    env: { VERSION: ${{ env.VERSION }} }
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with: { python-version: '3.10' }
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller cairosvg pillow
          pip install -r requirements.txt
      - name: Create icon
        run: |
          python -c "
          from PIL import Image
          img = Image.new('RGBA', (32, 32), (0, 100, 200, 255))
          img.save('icon.png', format='PNG')
          "
      - name: Build macOS
        run: |
          python3 -m PyInstaller \
            --name="meet-zone-macos-${{ env.VERSION }}" \
            --onefile --windowed \
            --icon=icon.png \
            --add-data="roster.csv:." \
            --hidden-import=zoneinfo.tzpath \
            --hidden-import=textual \
            --hidden-import=textual.app \
            --hidden-import=textual.widgets \
            --hidden-import=textual.widgets.button \
            --hidden-import=textual.widgets.data_table \
            --hidden-import=textual.widgets.footer \
            --hidden-import=textual.widgets.header \
            --hidden-import=textual.widgets.input \
            --hidden-import=textual.widgets.label \
            --hidden-import=textual.widgets.select \
            --hidden-import=textual.widgets.static \
            --hidden-import=textual.widgets.tabbed_content \
            --hidden-import=textual.widgets.tab_pane \
            --hidden-import=textual.containers \
            --hidden-import=textual.containers.container \
            --hidden-import=textual.containers.horizontal \
            --hidden-import=textual.containers.vertical \
            --hidden-import=textual.reactive \
            --hidden-import=textual.validation \
            --hidden-import=textual.coordinate \
            --hidden-import=pytz \
            --collect-all=textual \
            src/meet_zone/__main__.py
      - name: Make EXE & checksum
        run: |
          chmod +x dist/meet-zone-macos-${{ env.VERSION }}
          shasum -a 256 dist/meet-zone-macos-${{ env.VERSION }} \
            > dist/meet-zone-macos-${{ env.VERSION }}.sha256
      - name: Upload macOS
        uses: actions/upload-artifact@v3
        with:
          name: mac-${{ env.VERSION }}
          path: |
            dist/meet-zone-macos-${{ env.VERSION }}
            dist/meet-zone-macos-${{ env.VERSION }}.sha256

  build-linux:
    runs-on: ubuntu-latest
    env: { VERSION: ${{ env.VERSION }} }
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with: { python-version: '3.10' }
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller cairosvg pillow
          pip install -r requirements.txt
      - name: Create icon
        run: |
          python -c "
          from PIL import Image
          img = Image.new('RGBA', (32, 32), (0, 100, 200, 255))
          img.save('icon.png', format='PNG')
          "
      - name: Build Linux
        run: |
          python3 -m PyInstaller \
            --name="meet-zone-linux-${{ env.VERSION }}" \
            --onefile --windowed \
            --icon=icon.png \
            --add-data="roster.csv:." \
            --hidden-import=zoneinfo.tzpath \
            --hidden-import=textual \
            --hidden-import=textual.app \
            --hidden-import=textual.widgets \
            --hidden-import=textual.widgets.button \
            --hidden-import=textual.widgets.data_table \
            --hidden-import=textual.widgets.footer \
            --hidden-import=textual.widgets.header \
            --hidden-import=textual.widgets.input \
            --hidden-import=textual.widgets.label \
            --hidden-import=textual.widgets.select \
            --hidden-import=textual.widgets.static \
            --hidden-import=textual.widgets.tabbed_content \
            --hidden-import=textual.widgets.tab_pane \
            --hidden-import=textual.containers \
            --hidden-import=textual.containers.container \
            --hidden-import=textual.containers.horizontal \
            --hidden-import=textual.containers.vertical \
            --hidden-import=textual.reactive \
            --hidden-import=textual.validation \
            --hidden-import=textual.coordinate \
            --hidden-import=pytz \
            --collect-all=textual \
            src/meet_zone/__main__.py
      - name: Make EXE & checksum
        run: |
          chmod +x dist/meet-zone-linux-${{ env.VERSION }}
          sha256sum dist/meet-zone-linux-${{ env.VERSION }} \
            > dist/meet-zone-linux-${{ env.VERSION }}.sha256
      - name: Upload Linux
        uses: actions/upload-artifact@v3
        with:
          name: linux-${{ env.VERSION }}
          path: |
            dist/meet-zone-linux-${{ env.VERSION }}
            dist/meet-zone-linux-${{ env.VERSION }}.sha256

  create-source:
    runs-on: ubuntu-latest
    env: { VERSION: ${{ env.VERSION }} }
    steps:
      - uses: actions/checkout@v3
      - name: Make source archives
        run: |
          zip -r meet-zone-source-${{ env.VERSION }}.zip . -x "*.git*" "dist/*"
          tar czf meet-zone-source-${{ env.VERSION }}.tar.gz . --exclude=".git" --exclude="dist"
      - name: Checksums & upload
        run: |
          sha256sum meet-zone-source-${{ env.VERSION }}.zip  > meet-zone-source-${{ env.VERSION }}.zip.sha256
          sha256sum meet-zone-source-${{ env.VERSION }}.tar.gz > meet-zone-source-${{ env.VERSION }}.tar.gz.sha256
        shell: bash
      - name: Upload source
        uses: actions/upload-artifact@v3
        with:
          name: src-${{ env.VERSION }}
          path: |
            meet-zone-source-${{ env.VERSION }}.zip
            meet-zone-source-${{ env.VERSION }}.zip.sha256
            meet-zone-source-${{ env.VERSION }}.tar.gz
            meet-zone-source-${{ env.VERSION }}.tar.gz.sha256

  publish-release:
    needs: [build-windows, build-macos, build-linux, create-source]
    runs-on: ubuntu-latest
    env: { VERSION: ${{ env.VERSION }} }
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
      - name: Gather into root
        run: |
          for plat in win-${{ env.VERSION }} mac-${{ env.VERSION }} linux-${{ env.VERSION }}; do
            cp $plat/* .
          done
          cp src-${{ env.VERSION }}/* .
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: "v${{ env.VERSION }}"
          files: |
            meet-zone-windows-${{ env.VERSION }}.exe
            meet-zone-windows-${{ env.VERSION }}.exe.sha256
            meet-zone-macos-${{ env.VERSION }}
            meet-zone-macos-${{ env.VERSION }}.sha256
            meet-zone-linux-${{ env.VERSION }}
            meet-zone-linux-${{ env.VERSION }}.sha256
            meet-zone-source-${{ env.VERSION }}.zip
            meet-zone-source-${{ env.VERSION }}.zip.sha256
            meet-zone-source-${{ env.VERSION }}.tar.gz
            meet-zone-source-${{ env.VERSION }}.tar.gz.sha256
          draft: false
          prerelease: false
